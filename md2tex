#!/usr/bin/python

#md2TeX

import sys,os
from Tkinter import *


doc_class = sys.argv[3].lower()

FALSE = 0
TRUE = 1
OFF = 0
ON = 1


title_status = OFF
section_number = 0
table_status = OFF
table_head = OFF
unordered_list = []
unordered_list.append(OFF)
list_tab = 0
linenumber = 0
column = 0
line_break_status = OFF

program_error = FALSE

def error_message(msg,line_no):
	global program_error
	if(line_no==None):
		print msg
	else:
		print 'In line '+str(line_no)+' : '+msg
	program_error = TRUE
	


document_class_array = ['article','ieeetran','proc','minimal','report','book','slides','memoir','letter','beamer']


color = ['apricot','aquamarine','bittersweet','black','blue','bluegreen','blueviolet','brickred','brown','burntorange','cadetblue','carnationpink','cerulean','cornflowerblue','cyan','dandelion','darkorchid','emerald','forestgreen','fuchsia','goldenrod','gray','green','greenyellow','junglegreen','lavender','limegreen','magenta','mahogany','maroon','melon','midnightblue','mulberry','navyblue','olivegreen','orange','orangered','orchid','peach','periwinkle','pinegreen','plum','processblue','purple','rawsienna','red','redorange','redviolet','rhodamine','royalblue','royalpurple','rubinered','salmon','seagreen','sepia','skyblue','springgreen','tan','tealblue','thistle','turquoise','violet','violetred','white','wildstrawberry','yellow','yellowgreen','yelloworange']

text_effect_array = ['emphasis','roman',' sans serif','teletype','italic','small capitals','uppercase','bold']
text_effect_code = ['\\emph','\\textrm','\\textsf','\\texttt','\\textit','\\textsc','\\uppercase','\\textbf']

text_size_array = ['tiny','small','normalsize','large','huge']
text_size_code = ['\\tiny','\small','\\normalsize','\large','\huge']

code_extension_array = ['abap','ada','alg','ass','awk','bash','bas','c','cpp','cob','csh','dil','e','ex','for','gplt','hk','html','java','l','obn','p','perl','php','pov','pro','py','rexx','ruby','sim','sql','tcl','tex','vbs','vrml','xml','xslt']

code_language_array = ['abap','ada','algol','assembler','awk','bash','basic','c','c++','cobol','csh','delphi','eiffel','euphoria','fortran','gnuplot','haskell','html','java','logo','oberon-2','pascal','perl','php','pov','prolog','python','rexx','ruby','simula','sql','tcl','tex','vbsscript','vrml','xml','xslt']

letter_component_array = ['name','signature','address','location','opening','closing','cc','encl']
letter_component_code = ['\\name','\signature','\\address','\location','\opening','\closing','\cc','\encl']

effect_array_1 = ['abstract','equation','flushleft','flushright','center','frame']

frame_component_array = ['frametitle','framesubtitle']

format_array = ['usetheme','usecolortheme','useoutertheme','useinnertheme']

format_options = [
 ['Antibes','Bergen','Berkeley','Berlin','Copenhagen','Darmstadt','Dresden','Frankfurt','Goettingen','Hannover','Ilmenau','JuanLesPins','Luebeck','Madrid','Malmoe','Marburg','Montpellier','PaloAlto','Pittsburgh','Rochester','Singapore','Szeged','Warsaw','boxes','default'],['default','albatross','beaver','beetle','crane','dolphin','dove','fly','lily','orchid','rose','seagull','seahorse','whale','wolverine'],['infolines','miniframes','shadow','sidebar','smoothbars','smoothtree','split','tree'],['rectangles','circles','inmargin','rounded']

]



md = open(sys.argv[1],'r')
tex = open(sys.argv[2],'w+')
tex_body = open('latexbody.tex','w+')

tex.write('\documentclass[12pt]{'+doc_class+'}\n\n')
tex.write('%packages\n')

tex_body.write('\\begin{document}\n')

if(doc_class not in document_class_array):
	error_message('No document class named '+doc_class,None)
	exit()
	



def structure(sentence):
	
	global content_status, title_status, section_number	

	if(sentence[1]!='#'):
		if(doc_class=='letter'):
			error_message('Parts not allowed in letters',linenumber)
		else:
			tex_body.write('\part{'+sentence[1:][:-1]+'}\n')
	elif(sentence[2]!='#'):	

		if(doc_class!='report'):
			error_message('Chapters not allowed in reports',linenumber)
		else:
			tex_body.write('\chapter{'+sentence[2:][:-1]+'}\n')
	elif(sentence[3]!='#'):		
		if(doc_class=='letter'):
			error_message('Sections not allowed in letters',linenumber)
		else:
			tex_body.write('\section{'+sentence[3:][:-1]+'}\n')
	elif(sentence[4]!='#'):		
		if(doc_class=='letter'):
			error_message('Subsections not allowed in letters',linenumber)
		else:
			tex_body.write('\subsection{'+sentence[4:][:-1]+'}\n')
	elif(sentence[5]!='#'):		
		if(doc_class=='letter'):
			error_message('Subsubsections not allowed in letters',linenumber)
		else:
			tex_body.write('\subsubsection{'+sentence[5:][:-1]+'}\n')
	elif(sentence[6]!='#'):		
		if(doc_class=='letter'):
			error_message('Paragraphs not allowed in letters',linenumber)
		else:
			tex_body.write('\paragraph{'+sentence[6:][:-1]+'}\n')
	elif(sentence[7]!='#'):		
		if(doc_class=='letter'):
			error_message('Subparagraphs not allowed in letters',linenumber)
		else:
			tex_body.write('\subparagraph{'+sentence[7:][:-1]+'}\n')







def section_content(sentence):

	sentence = md_effect(sentence,'**','\\textbf{','}')
	sentence = md_effect(sentence,'*','\\textit{','}')
	sentence = md_effect(sentence,'<<','\\begin{flushleft}','\end{flusfleft}')
	sentence = md_effect(sentence,'>>','\\begin{flushright}','\end{flusfright}')
	sentence = md_effect(sentence,'==','\\begin{center}','\end{center}')


	while(sentence.find('![Alt text](')!=-1):
		add_package('','graphicx')
		sentence = sentence.replace('![Alt text](',' \\includegraphics{',1)
		sentence = sentence.replace(')','}',1)

	while(sentence.find('](')!=-1):
		add_package('','hyperref')
		label = sentence[sentence.find('[')+1:sentence.find(']')]
		link = sentence[sentence.find('(')+1:sentence.find(')')]
		sentence = sentence.replace(sentence[sentence.find('['):sentence.find(')')+1],'\href{'+link+'}{'+label+'}',1)
	
	while(sentence.find('~')!=-1):
		
		effect = sentence[sentence.find('~')+1:sentence.find(':')]
		effect = slicer(effect,' ')
		text = sentence[sentence.find(':')+1:sentence.find(':')+sentence[(sentence.find(':')+1):].find('~')+1]
		effect = sentence[sentence.find('~')+1:sentence.find(':')]
		effect = slicer(effect,' ')
		
		text = sentence[sentence.find(':')+1:sentence.find(':')+sentence[(sentence.find(':')+1):].find('~')+1]

		if(effect=='title'):
			if(bluntfile.find('~author')==-1):
				sentence = tilde_effect(sentence,'','','\\title{',text+'}\maketitle')
			else:
				sentence = tilde_effect(sentence,'','','\\title{',text+'}')
		
		elif(effect=='author'):
			sentence = tilde_effect(sentence,'','','\\author{',text+'}\maketitle')
			
		
		elif(effect=='footnote'):
			sentence = tilde_effect(sentence,'','','\\footnote{',text+'}')
		
		elif(effect=='marginnote'):
			sentence = tilde_effect(sentence,'','marginnote','\marginnote{',text+'}')

		elif(effect in color):
			sentence = tilde_effect(sentence,'usenames,dvipsnames','color','\color{'+effect+'}{',text+'}')
		
		elif(effect in text_effect_array):
			sentence = tilde_effect(sentence,'','',text_effect_code[text_effect_array.index(effect)]+'{',text+'}')
		
		elif(effect in text_size_array):
			sentence = tilde_effect(sentence,'','','{'+text_size_code[text_size_array.index(effect)]+' ',text+'}')

		elif(effect in effect_array_1):
			sentence = tilde_effect(sentence,'','','\\begin{'+effect+'}',text+'\end{'+effect+'}')
			
		elif(effect=='import code'):
			extension = text[text.find('.')+1:]
			if(extension in code_extension_array):
				language = code_language_array[code_extension_array.index(extension)]
				sentence = tilde_effect(sentence,'','listings','{\lstset{language='+language+'}\lstinputlisting[frame=single]{',text+'}}')
			else:
				error_message('No .'+extension+' extension',linenumber)
				break
				
				
		elif(effect in letter_component_array and doc_class=='letter'):
			sentence = tilde_effect(sentence,'','',letter_component_code[letter_component_array.index(effect)]+'{',text+'}')
	
		
		elif(effect in frame_component_array and doc_class=='beamer'):
			sentence = tilde_effect(sentence,'','','\\'+effect+'{',text+'}')
		
		
		elif(effect in format_array and doc_class=='beamer'):
			if(text in format_options[format_array.index(effect)]):
				add_format(effect,text)
				sentence = sentence.replace('~','',1)
				sentence = sentence.replace('~','',1)
				sentence = sentence.replace(':','',1)
				sentence = sentence.replace(effect,'',1)
				sentence = sentence.replace(text,'',1)
			

		elif(effect in code_language_array):
			sentence = tilde_effect(sentence,'','listings','{\lstset{language='+effect+'}\\begin{lstlisting}[frame=single]',text+'\end{lstlisting}')
			

		elif(effect=='fraction'):
			index = text.find('/')
			if(index==-1):
				error_message('No / in a fraction',linenumber)
				break
			else:
				sentence = tilde_effect(sentence,'','','$\\frac{',text[:index]+'}{'+text[index+1:]+'}$')
					
		elif(effect=='square root' or effect=='sqrt'):
			sentence = tilde_effect(sentence,'','','$$\\sqrt{',text+'}$$')
			


		elif(effect[:1]=='#' and len(effect)==7):
			
			effect = effect[1:]
			efflen = len(effect)
			effect = tuple(int(effect[i:i+efflen/3],16) for i in range(0,efflen,efflen/3))
			effect = [float(x) for x in effect]
			effect = [x/255 for x in effect]
			effect = ','.join(str(x) for x in effect)

			sentence = tilde_effect(sentence,'usenames,dvipsnames','color','{\color[rgb]{'+effect+'}{',text+'}')
		
		elif(effect.find(',')==2):
			add_package('usenames,dvipsnames','color')
			effect = [int(s) for s in effect.split() if s.isdigit()]
			if(all(isinstance(item,int) for item in effect)):
				effect = [x/255 for x in effect]
			effect = ','.join(str(x) for x in effect)
			sentence = sentence.replace(sentence[sentence.find('~'):sentence.find(':')],'{\color[rgb]{'+effect+'}{',1)
			sentence = sentence.replace(sentence[sentence.find(':'):sentence.find('~')+1],text+'}',1)
		else:
			error_message('No effect '+effect,linenumber)
			break



	tex_body.write(sentence)
	
	return sentence


def md_effect(sentence,sign,begin,end):

	while(sentence.find(sign)!=-1):
		sentence=sentence.replace(sign,begin,1)
		sentence=sentence.replace(sign,end,1)

	return sentence


def tilde_effect(sentence,option,package,effect,text):

	if(package!=''):
		add_package(option,package)
		
	sentence = sentence.replace(sentence[sentence.find('~'):sentence.find(':')],effect,1)
	sentence = sentence.replace(sentence[sentence.find(':'):sentence.find('~')+1],text,1)

	return sentence


def table_effect(sentence):

	global nextsentence,column
	sentence = sentence.replace('|','&')

	nextsentence = nextsentence[:-1]+'|\n'
	if(table_status==OFF):

		tex_body.write('\\begin{tabular}{')
		for i in range(0,column):
		
			alignment = 'l'
			counter = nextsentence.find('|')
			if(nextsentence[counter-1]==':'):
				alignment = 'r'
				if(nextsentence[0]==':'):
					alignment = 'c'
			tex_body.write('|'+alignment)
			nextsentence = nextsentence[(counter+1):]

		tex_body.write('|}\n\hline\n')

	tex_body.write(sentence[:-1]+'\\\\\n')
	
	if(table_status==OFF):
		tex_body.write('\\hline\n')

	return ON


def slicer(sentence,character):

	left2trim = TRUE
	right2trim = TRUE
	while(left2trim or right2trim):
		if(sentence[:1]==character):
			sentence = sentence[1:]
		else:
			left2trim = FALSE
		if(sentence[-1:]==character):
			sentence = sentence[:-1]
		else:
			right2trim = FALSE

	return sentence



def sentence_list(sentence):
	if(unordered_list[list_tab]==OFF):
		tex_body.write('\\begin{itemize}\n')
	tex_body.write('\item ' + sentence[(2+list_tab):])
		
	return ON
	

def add_package(option,package):

	tex.seek(0)
	package_virgin = TRUE
	package = '\usepackage['+option+']{'+package+'}\n'

	for line in tex.readlines():
		if(line==package):
			package_virgin = FALSE
	
	if(package_virgin):
		tex.write(package)


def add_format(effect,option):

	tex.seek(0)
	format_virgin = TRUE
	the_format = effect+'{'+option+'}\n'

	for line in tex.readlines():
		if(line==the_format):
			format_virgin = FALSE
	
	if(format_virgin):
		tex.write(the_format)


def list_structure(sentence):

	global list_tab,unordered_list

	line_effect_virgin = TRUE

	if( sentence[:list_tab]=='\t'*list_tab and (sentence[list_tab]=='*' or sentence[list_tab]=='+' or sentence[list_tab]=='-')  and sentence[list_tab+1]==' '):
		unordered_list[list_tab] = sentence_list(sentence)
		line_effect_virgin = FALSE
	
	elif( sentence[:(list_tab+1)]=='\t'*(list_tab+1) and (sentence[list_tab+1]=='*' or sentence[list_tab+1]=='+' or sentence[list_tab+1]=='-')  and sentence[list_tab+2]==' '):
		list_tab += 1
		unordered_list.append(OFF)
		unordered_list[list_tab] = sentence_list(sentence)
		line_effect_virgin = FALSE
	

	elif(unordered_list[list_tab]==ON):
		counter = list_tab+1
		for a in sentence:
				
			if(a=='\t'):		
				counter -= 1

		for a in range(0,counter):
			unordered_list[list_tab] = OFF
			tex_body.write('\end{itemize}\n')
			while(list_tab>0):
				list_tab -= 1 
				unordered_list.pop()
		line_effect_virgin = list_structure(sentence)

	return line_effect_virgin


	

#main

bluntfile = md.read()
md.seek(0)
mdfile = md.readlines()+['\n']
md.seek(0)


print 
for line in md.readlines()+['\n']:


	sentence = line
	linenumber += 1
	line_effect_virgin = TRUE


	
	if(sentence[0]=='#'):
		
		structure(sentence)
		line_effect_virgin = FALSE


	#


	if(sentence.count('|') and line_effect_virgin):
		
		sentence = slicer(sentence[:-1],'|')
		nextsentence = slicer(mdfile[linenumber][:-1],'|')
		
		if(table_head==ON):
			table_status = table_effect(sentence)

		if(sentence.count('|')==nextsentence.count('|') and nextsentence.count('-')):
			column = nextsentence.count('|')+1
			table_status = table_effect(sentence)
		else:
			table_head = ON
				
		line_effect_virgin = FALSE

	elif(table_status==ON):

		tex_body.write('\hline\n\end{tabular}\n')
		table_status = OFF
		table_head = OFF

	
	if(line_effect_virgin):
		line_effect_virgin = list_structure(sentence)

	#
	if(line_effect_virgin):
		tex_body.write(sentence)
	
	'''if(line=='\n' and line_break_status==OFF):
		tex_body.write('\\\\\n')
		linebreak_status = ON
	else:
		linebreak_status = OFF'''
		

	#


tex_body.seek(0)
sentence = tex_body.read()
sentence = section_content(sentence)	
sentence = sentence+'\end{document}\n'

while(sentence.find('\n\n')!=-1):
	sentence = sentence.replace('\n\n','\n')
#sentence = sentence.replace('\n\n','\n\\\\\n')


tex_body.seek(0)
tex.write(sentence)


md.close()
tex.close()
tex_body.close()
os.system('rm latexbody.tex')

os.system('pdflatex '+sys.argv[2])

if(program_error):
	print '\n...Converted With Error...\n'
else:
	print '\n...Converted Successfully...\n'


######END#########
